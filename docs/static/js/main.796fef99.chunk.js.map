{"version":3,"sources":["components/AddCategory.js","components/GiftGridItem.js","helpers/getsGifs.js","components/GiftGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","warn","type","value","onChange","target","GiftGridItem","id","title","url","className","src","alt","getsGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GiftGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","GiftExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAyB9C,OACE,sBAAMC,SAhBa,SAACC,GAEpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,EAE5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAIvCC,QAAQC,KAAK,wBAMf,SACE,uBACEC,KAAK,OACLC,MAAOX,EACPY,SA1BoB,SAACT,GAEzBF,EAAcE,EAAEU,OAAOF,a,QCPdG,EAAe,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGvC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNGK,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEhBN,EAFgB,iDAEgCO,UAAUF,GAF1C,6BAFT,oCAES,SAIHG,MAAMR,GAJH,cAIhBS,EAJgB,gBAKDA,EAAKC,OALJ,uBAKfC,EALe,EAKfA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAM,CACJhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAZhB,kBAgBfY,GAhBe,4CAAH,sDCERK,EAAW,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECDZ,SAACA,GAAc,IAAD,EAEdvB,mBAAS,CACjC6B,KAAM,GACNO,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA4BxC,OArBAC,qBAAU,WAERjB,EAASC,GAAUiB,MAAK,SAAAP,GAQtBQ,YAAW,WACTH,EAAS,CACPT,KAAMI,EACNG,SAAS,MAEV,UAIJ,CAACb,IAEGc,EDzBwBK,CAAanB,GAAhCU,EAF0B,EAE/BJ,KAAaO,EAFkB,EAElBA,QASpB,OACE,qCACE,6BAAKb,IACHa,GAAW,6CACb,qBAAKjB,UAAU,YAAf,SAEIc,EAAOF,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAEMA,GADEA,EAAIhB,aEiCT2B,EApDO,WAAM,MAGU3C,mBAAS,CAAC,mBAHpB,mBAGnB4C,EAHmB,KAGP7C,EAHO,KA8B1B,OACE,qCACE,+CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEI6C,EAAWb,KAAI,SAACR,EAAUsB,GAAX,OACb,cAAC,EAAD,CAEEtB,SAAYA,GADJsB,Y,MCnCtBC,IAASC,OAAO,cAAC,EAAD,IAAmBC,SAASC,eAAe,W","file":"static/js/main.796fef99.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n\r\n    setInputValue(e.target.value);\r\n\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n\r\n    e.preventDefault();\r\n\r\n    if(inputValue.trim().length > 1){\r\n\r\n      setCategories( cats => [inputValue, ...cats] );\r\n\r\n    }else{\r\n      \r\n      console.warn('No se envió nada');\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit = { handleSubmit }>\r\n      <input \r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange = { handleInputChange }\r\n      />\r\n    </form>\r\n  );\r\n\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react'\r\n\r\nexport const GiftGridItem = ({id, title, url}) => {\r\n\r\n  //console.log(id, title, url);\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};","const apiKey = 'yNhz2aHsDslhH95sCx2qTEE6TxgIB5VK';\r\n\r\nexport const getsGifs = async (category) =>{\r\n    \r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\r\n\r\n  const resp = await fetch(url);\r\n  const {data} = await resp.json();\r\n\r\n  //Se pone el signo ? para hacer validación de se existe en la parte de img.images? \r\n  const gifs = data.map( img => {\r\n    return{\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  });\r\n\r\n  return gifs;\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { GiftGridItem } from './GiftGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GiftGrid = ({category}) => {\r\n\r\n  const {data:images, loading} = useFetchGifs(category);\r\n\r\n  /**\r\n  * Se puede en enviar la imagen de varias formas al componente:\r\n  * img = {img} \r\n  * o se puede enviar todos los elementos por propiedad (como sea más comodo), esto se hace con el operador spread\r\n  *  {...img}\r\n  */\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      { loading && <p>Cargando... </p>}\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map((img) => (\r\n            <GiftGridItem\r\n              key ={img.id}\r\n              {...img}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};","import {useState, useEffect} from 'react';\r\nimport { getsGifs } from '../helpers/getsGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n  \r\n  useEffect(() => { \r\n\r\n    getsGifs(category).then(images => {\r\n\r\n      // setstate({\r\n      // \tdata: images,\r\n      // \tloading: false\r\n      // });\r\n\r\n      //Se agrega un timeOut para ver el efecto de Loading...\r\n      setTimeout(() => {\r\n        setstate({\r\n          data: images,\r\n          loading: false\r\n        });\r\n      }, 2000);\r\n\r\n    });\r\n\r\n  }, [category]);\r\n\r\n  return state;\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GiftGrid } from \"./components/GiftGrid\";\r\n\r\nconst GiftExpertApp = () => {\r\n  //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n  const [categories, setCategories] = useState([\"Peaky Blinders\"]);\r\n\r\n  //const handleAdd = () => { setCategories([...categories, \"Otra categoría\"]); }; //Forma (1) utilizando solo el operador spread\r\n\r\n  //Forma (2) utilizando el callback que se puede emplear en el segundo array del estado, en este caso llamado setCategories\r\n  //const handleAdd = () => { setCategories( cats => [...cats, 'Naruto'] ); };\r\n\r\n  //Se elimina el botón y la función para agregar otro componente.\r\n\r\n  // Primer componente creado:\r\n  // return (\r\n  //   <>\r\n  //     <h2>GiftExpertApp</h2>\r\n  //     <AddCategory setCategories = {setCategories}/>\r\n  //     <hr />\r\n  //     {/* <button onClick={handleAdd}>Agregar</button> */}\r\n  //     <ol>\r\n  //       {\r\n  //         categories.map((category, i) => {\r\n  //           return <li key={i}> {category} </li>;\r\n  //         })\r\n  //       }\r\n  //     </ol>\r\n  //   </>\r\n  // );\r\n\r\n  //Componente con un segundo componente anidado:\r\n  return (\r\n    <>\r\n      <h2>GiftExpertApp</h2>\r\n      <AddCategory setCategories = {setCategories}/>\r\n      <hr />\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n      <ol>\r\n        {\r\n          categories.map((category, i) => (\r\n            <GiftGrid \r\n              key = { i }\r\n              category = {category} \r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n\r\n\r\n};\r\n\r\nexport default GiftExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//Components\nimport GiftExpertApp from './GiftExpertApp';\n\n//Estilos\nimport './index.css';\n\nReactDOM.render(<GiftExpertApp />, document.getElementById('root'));"],"sourceRoot":""}